{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.js"],"names":["module","exports","INITIAL_VALUES","email","password","Login","dispatch","useDispatch","useState","showPassword","setShowPassword","validate","useCallback","values","errors","test","length","handleSubmit","setSubmitting","authOperations","logIn","togglePassword","prev","className","s","loginWindow","initialValues","onSubmit","touched","handleChange","handleBlur","isSubmitting","form","TextField","fullWidth","variant","id","name","label","value","onChange","onBlur","error","Boolean","margin","helperText","passwordField","type","passwordIconButton","IconButton","onClick","disabled","confirmButton","Button","color","Object","keys","to","routes","register"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,YAAc,2BAA2B,KAAO,oBAAoB,cAAgB,6BAA6B,mBAAqB,kCAAkC,cAAgB,+B,oOCYpMC,EAAiB,CACnBC,MAAO,GACPC,SAAU,IAyGCC,EAtGD,WACV,IAAMC,EAAWC,cACjB,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAWC,uBAAY,SAAAC,GACzB,IAAMC,EAAS,GAaf,OAZKD,EAAOV,MAGP,2CAA2CY,KAAKF,EAAOV,SAExDW,EAAOX,MAAQ,yBAJfW,EAAOX,MAAQ,WAMdU,EAAOT,UAEDS,EAAOT,SAASY,OAAS,GAAKH,EAAOT,SAASY,OAAS,MAC9DF,EAAOV,SAAW,wFAFlBU,EAAOV,SAAW,WAIfU,IACR,IAEGG,EAAeL,uBAAY,SAACC,EAAD,GAAgC,IAArBK,EAAoB,EAApBA,cACxCZ,EAASa,IAAeC,MAAMP,IAC9BK,GAAc,KACf,CAACZ,IAEEe,EAAiBT,uBAAY,WAC/BF,GAAgB,SAAAY,GAAI,OAAKA,OAC1B,IAEH,OACI,qCACI,oBAAIC,UAAU,OAAd,0BACA,sBAAKA,UAAWC,IAAEC,YAAlB,UACI,cAAC,IAAD,CACIC,cAAexB,EACfS,SAAUA,EACVgB,SAAUV,EAHd,SAKK,gBACGJ,EADH,EACGA,OACAC,EAFH,EAEGA,OACAc,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAZ,EALH,EAKGA,aACAa,EANH,EAMGA,WACAC,EAPH,EAOGA,aAPH,OASG,uBAAMR,UAAWC,IAAEQ,KAAML,SAAUV,EAAnC,UACI,cAACgB,EAAA,EAAD,CACIC,WAAS,EACTC,QAAQ,WACRC,GAAG,QACHC,KAAK,QACLC,MAAM,QACNC,MAAO1B,EAAOV,MACdqC,SAAUX,EACVY,OAAQX,EACRY,MAAOd,EAAQzB,OAASwC,QAAQ7B,EAAOX,OACvCyC,OAAO,SACPC,WAAYjB,EAAQzB,OAASW,EAAOX,QAExC,sBAAKoB,UAAWC,IAAEsB,cAAlB,UACI,cAACb,EAAA,EAAD,CACIC,WAAS,EACTC,QAAQ,WACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNS,KAAMtC,EAAe,OAAS,WAC9B8B,MAAO1B,EAAOT,SACdoC,SAAUX,EACVY,OAAQX,EACRY,MAAOd,EAAQxB,UAAYuC,QAAQ7B,EAAOV,UAC1CwC,OAAO,SACPC,WAAYjB,EAAQxB,UAAYU,EAAOV,WAE3C,qBAAKmB,UAAWC,IAAEwB,mBAAlB,SACI,cAACC,EAAA,EAAD,CACI,aAAW,aACXC,QAAS7B,EACT8B,UAAWtC,EAAOT,SAHtB,SAIKK,EAAe,cAAC,IAAD,IAAoB,cAAC,IAAD,WAIhD,qBAAKc,UAAWC,IAAE4B,cAAlB,SACI,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUnB,QAAQ,YAAYY,KAAK,SAASI,SAAUpB,KAC9DwB,OAAOC,KAAK5B,GAASZ,SAAWuC,OAAOC,KAAKtD,GAAgBc,QACxB,IAA/BuC,OAAOC,KAAK1C,GAAQE,QAF/B,6BAShB,qEAAuC,cAAC,IAAD,CAAMyC,GAAIC,IAAOC,SAAjB","file":"static/js/Login.eba720d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWindow\":\"Login_loginWindow__1gZKu\",\"form\":\"Login_form__2mvFD\",\"passwordField\":\"Login_passwordField__2emxB\",\"passwordIconButton\":\"Login_passwordIconButton__1nPPX\",\"confirmButton\":\"Login_confirmButton__QBW2K\"};","import React, { useState, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport { routes } from \"utils/routes\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport s from './Login.module.css';\nimport authOperations from \"redux/auth/auth-operations\";\n\nconst INITIAL_VALUES = {\n    email: '',\n    password: '',\n};\n \nconst Login = () => {\n    const dispatch = useDispatch();\n    const [showPassword, setShowPassword] = useState(false);\n\n    const validate = useCallback(values => {\n        const errors = {};\n        if (!values.email) {\n            errors.email = 'Required';\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = 'Invalid email address';\n        }\n        if (!values.password) {\n            errors.password = 'Required';\n        } else if (values.password.length < 8 || values.password.length > 16) {\n            errors.password = 'Invalid password. Password should be greater then 8 symbols and less then 16 symbols';\n        }\n        return errors;\n    }, []);\n\n    const handleSubmit = useCallback((values, { setSubmitting }) => {\n        dispatch(authOperations.logIn(values));\n        setSubmitting(false);\n    }, [dispatch]);\n\n    const togglePassword = useCallback(() => {\n        setShowPassword(prev => !prev);\n    }, []);\n\n    return (\n        <>\n            <h1 className=\"text\">Sign in form</h1>\n            <div className={s.loginWindow}>\n                <Formik\n                    initialValues={INITIAL_VALUES}\n                    validate={validate}\n                    onSubmit={handleSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleSubmit,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form className={s.form} onSubmit={handleSubmit}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                id=\"email\"\n                                name=\"email\"\n                                label=\"Email\"\n                                value={values.email}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.email && Boolean(errors.email)}\n                                margin=\"normal\"\n                                helperText={touched.email && errors.email}\n                            />\n                            <div className={s.passwordField}>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    id=\"password\"\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type={showPassword ? 'text' : 'password'}\n                                    value={values.password}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={touched.password && Boolean(errors.password)}\n                                    margin=\"normal\"\n                                    helperText={touched.password && errors.password}\n                                />\n                                <div className={s.passwordIconButton}>\n                                    <IconButton\n                                        aria-label=\"visibility\"\n                                        onClick={togglePassword}\n                                        disabled={!values.password}>\n                                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                </div>\n                            </div>\n                            <div className={s.confirmButton}>\n                                <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting ||\n                                    !(Object.keys(touched).length === Object.keys(INITIAL_VALUES).length\n                                        && Object.keys(errors).length === 0)}>\n                                    Sign in\n                                </Button>\n                            </div>\n                        </form>\n                    )}\n                </Formik>\n                <p>Does not have an account yet? Go to <Link to={routes.register}>REGISTER!</Link></p>\n            </div>\n        </>\n    );\n }\n \nexport default Login;"],"sourceRoot":""}