{"version":3,"sources":["components/Registration/Registration.module.css","components/Registration/Registration.js"],"names":["module","exports","INITIAL_VALUES","name","email","password","confirmPassword","Registration","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","validate","useCallback","values","errors","length","test","handleSubmit","setSubmitting","setTimeout","alert","JSON","stringify","togglePassword","prev","toggleConfirmPassword","className","s","loginWindow","initialValues","onSubmit","touched","handleChange","handleBlur","isSubmitting","form","TextField","fullWidth","variant","margin","id","label","value","onChange","onBlur","error","Boolean","helperText","passwordField","type","passwordIconButton","IconButton","onClick","disabled","confirmButton","Button","color","Object","keys","to","routes","login"],"mappings":"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","file":"static/js/Registration.dbbd8b38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWindow\":\"Registration_loginWindow__14kC2\",\"form\":\"Registration_form__pVcsB\",\"passwordField\":\"Registration_passwordField__1v4yE\",\"passwordIconButton\":\"Registration_passwordIconButton__1IS1a\",\"confirmButton\":\"Registration_confirmButton__2_Ics\"};","import React, { useCallback, useState } from \"react\";\nimport { Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport { routes } from \"utils/routes\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport s from './Registration.module.css';\n/** \n * NOTE: initial values in registration form\n    values = {\n        name: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n    }\n*/\n\nconst INITIAL_VALUES = {\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n};\n \nconst Registration = () => {\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n    const validate = useCallback(values => {\n        const errors = {};\n\n        if (!values.name) {\n            errors.name = 'Required';\n        } else if (values.name.length < 3) {\n            errors.name = 'Invalid name. Name should have at least 3 symbols';\n        }\n\n        if (!values.email) {\n            errors.email = 'Required';\n        } else if (\n            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n            errors.email = 'Invalid email address';\n        }\n\n        if (!values.password) {\n            errors.password = 'Required';\n        } else if (values.password.length < 8 || values.password.length > 16) {\n            errors.password = 'Invalid password. Password should be greater then 8 symbols and less then 16 symbols';\n        }\n\n        if (!values.confirmPassword) {\n            errors.confirmPassword = 'Required';\n        } else if (values.confirmPassword.length < 8 || values.confirmPassword.length > 16) {\n            errors.confirmPassword = 'Invalid password. Password should be greater then 8 symbols and less then 16 symbols';\n        } else if (values.password !== values.confirmPassword) {\n            errors.confirmPassword = 'Confirm password should be equal to password';\n        }\n\n        return errors;\n    }, []);\n\n    const handleSubmit = useCallback((values, { setSubmitting }) => {\n        setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n        }, 400);\n    }, []);\n\n    const togglePassword = useCallback(() => {\n        setShowPassword(prev => !prev);\n    }, []);\n\n    const toggleConfirmPassword = useCallback(() => {\n        setShowConfirmPassword(prev => !prev);\n    }, []);\n\n    return (\n        <>\n            <h1 className=\"text\">Sing up form</h1>\n            <div className={s.loginWindow}>\n                <Formik\n                    initialValues={INITIAL_VALUES}\n                    validate={validate}\n                    onSubmit={handleSubmit}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleSubmit,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form className={s.form} onSubmit={handleSubmit}>\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                id=\"name\"\n                                name=\"name\"\n                                label=\"Name\"\n                                value={values.name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.name && Boolean(errors.name)}\n                                helperText={touched.name && errors.name}\n                            />\n                            <TextField\n                                fullWidth\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                id=\"email\"\n                                name=\"email\"\n                                label=\"Email\"\n                                value={values.email}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.email && Boolean(errors.email)}\n                                helperText={touched.email && errors.email}\n                            />\n                            <div className={s.passwordField}>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    id=\"password\"\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type={showPassword ? 'text' : 'password'}\n                                    value={values.password}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={touched.password && Boolean(errors.password)}\n                                    margin=\"normal\"\n                                    helperText={touched.password && errors.password}\n                                />\n                                <div className={s.passwordIconButton}>\n                                    <IconButton\n                                        aria-label=\"visibility\"\n                                        onClick={togglePassword}\n                                        disabled={!values.password}>\n                                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                </div>\n                            </div>\n                            <div className={s.passwordField}>\n                                <TextField\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    id=\"confirmPassword\"\n                                    name=\"confirmPassword\"\n                                    label=\"Confirm Password\"\n                                    type={showConfirmPassword ? 'text' : 'password'}\n                                    value={values.confirmPassword}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error={touched.confirmPassword && Boolean(errors.confirmPassword)}\n                                    margin=\"normal\"\n                                    helperText={touched.confirmPassword && errors.confirmPassword}\n                                />\n                                <div className={s.passwordIconButton}>\n                                    <IconButton\n                                        aria-label=\"visibility\"\n                                        onClick={toggleConfirmPassword}\n                                        disabled={!values.confirmPassword}>\n                                        {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\n                                    </IconButton>\n                                </div>\n                            </div>\n                            <div className={s.confirmButton}>\n                                <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting ||\n                                    !(Object.keys(touched).length === Object.keys(INITIAL_VALUES).length\n                                        && Object.keys(errors).length === 0)}>\n                                    Sign up\n                                </Button>\n                            </div>\n                        </form>\n                    )}\n                </Formik>\n                <p>Do you already have an account? Go to <Link to={routes.login}>LOGIN!</Link></p>\n            </div>\n        </>\n    );\n }\n \nexport default Registration;"],"sourceRoot":""}