{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","services/contactshelf-api.js","redux/actions.js","redux/operations.js","redux/reducer.js","redux/store.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContacts","a","axios","get","data","postContact","contact","post","name","number","deleteContact","contactId","delete","defaults","baseURL","changeFilter","createAction","createAsyncThunk","_","rejectWithValue","contactShelfAPI","contacts","id","addContact","value","dispatch","contactsActions","entities","createReducer","fulfilled","payload","state","filter","isLoading","pending","rejected","error","combineReducers","store","configureStore","reducer","phoneBook","phoneBookReducer","devTools","process","getContacts","getFilter","getIsLoading","getError","getVisibleContacts","createSelector","normalizedFilter","toLocaleLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","contactsSelectors","useDispatch","handleChange","evt","currentTarget","reset","onSubmit","preventDefault","map","alert","contactsOperations","className","s","form","label","input","type","pattern","title","required","onChange","button","Filter","e","target","ContactListItem","onDelete","item","onClick","ContactList","filteredContacts","useEffect","list","onDeleteContact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,4B,mBCA1DD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,MAAQ,wB,qnBCG7E,SAAeC,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACoBC,IAAMC,IAAI,aAD9B,uBACKC,EADL,EACKA,KADL,kBAEIA,GAFJ,4C,sBAKA,SAAeC,EAAtB,kC,4CAAO,WAA2BC,GAA3B,SAAAL,EAAA,sEACUC,IAAMK,KAAK,YAAa,CACjCC,KAAMF,EAAQE,KACdC,OAAQH,EAAQG,SAHjB,oF,sBAOA,SAAeC,EAAtB,kC,4CAAO,WAA6BC,GAA7B,SAAAV,EAAA,sEACUC,IAAMU,OAAN,oBAA0BD,IADpC,oF,sBAdPT,IAAMW,SAASC,QAAU,wBC6BlB,I,MAAMC,EAAeC,YAAa,0BCjB5BhB,EAAgBiB,YACzB,yBADyC,uCAEzC,WAAOC,EAAP,oBAAAjB,EAAA,6DAAYkB,EAAZ,EAAYA,gBAAZ,kBAE+BC,IAF/B,cAEcC,EAFd,yBAGeA,GAHf,yDAKeF,EAAgB,EAAD,KAL9B,yDAFyC,yDAsBhCT,EAAgBO,YACzB,yBADyC,uCAEzC,WAAOK,EAAP,kBAAArB,EAAA,6DAAakB,EAAb,EAAaA,gBAAb,kBAEcC,EAA8BE,GAF5C,gCAGeA,GAHf,yDAKeH,EAAgB,EAAD,KAL9B,yDAFyC,yDAyBhCI,EAAaN,YACtB,sBADsC,uCAEtC,uCAAAhB,EAAA,6DAAQO,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAWU,EAAzB,EAAyBA,gBAAzB,kBAE+BC,EAA4B,CAC/CZ,OACAC,WAJZ,uBAEgBL,EAFhB,EAEgBA,KAFhB,kBAMeA,GANf,2DAQee,EAAgB,EAAD,KAR9B,0DAFsC,yDAe7BJ,EAAe,SAACS,GAAD,OAAW,SAAAC,GACnCA,EAASC,EAA6BF,MCzEpCG,EAAWC,YAAc,IAAD,mBAMzB5B,EAAc6B,WAAY,SAACX,EAAD,YAAMY,WANP,cAOzBP,EAAWM,WAAY,SAACE,EAAD,YAAUD,SAAV,mBAAqCC,OAPnC,cAQzBrB,EAAcmB,WAAY,SAACE,EAAD,OAAUD,EAAV,EAAUA,QAAV,OACvBC,EAAMC,QAAO,qBAAGV,KAAgBQ,QATV,IAYxBG,EAAYL,aAAc,GAAD,mBAK1B5B,EAAckC,SAAU,kBAAM,KALJ,cAM1BlC,EAAc6B,WAAY,kBAAM,KANN,cAO1B7B,EAAcmC,UAAW,kBAAM,KAPL,cAa1BzB,EAAcwB,SAAU,kBAAM,KAbJ,cAc1BxB,EAAcmB,WAAY,kBAAM,KAdN,cAe1BnB,EAAcyB,UAAW,kBAAM,KAfL,cAqB1BZ,EAAWW,SAAU,kBAAM,KArBD,cAsB1BX,EAAWM,WAAY,kBAAM,KAtBH,cAuB1BN,EAAWY,UAAW,kBAAM,KAvBF,IA0BzBC,EAAQR,YAAc,MAAD,mBAItB5B,EAAcmC,UAAW,SAACjB,EAAD,YAAMY,WAJT,cAKtB9B,EAAckC,SAAU,kBAAM,QALR,cAUtBxB,EAAcyB,UAAW,SAACjB,EAAD,YAAMY,WAVT,cAWtBpB,EAAcwB,SAAU,kBAAM,QAXR,cAgBtBX,EAAWY,UAAW,SAACjB,EAAD,YAAMY,WAhBN,cAiBtBP,EAAWW,SAAU,kBAAM,QAjBL,IAoBrBF,EAASJ,YAAc,GAAD,eACvBF,GAA+B,SAACR,EAAD,YAAMY,YAG3BO,cAAgB,CAC3BV,WACAK,SACAC,YACAG,UCnESE,EAAQC,YAAe,CAChCC,QAAS,CACLC,UAAWC,GAEfC,UAAUC,I,wBCLDC,EAAc,SAACd,GAAD,OAAWA,EAAMU,UAAUd,UAEzCmB,EAAY,SAACf,GAAD,OAAWA,EAAMU,UAAUT,QAEvCe,EAAe,SAAChB,GAAD,OAAWA,EAAMU,UAAUR,WAE1Ce,EAAW,SAACjB,GAAD,OAAWA,EAAMU,UAAUL,OAEtCa,EAAqBC,YAC9B,CAACL,EAAaC,IAAY,SAACzB,EAAUW,GACjC,IAAMmB,EAAmBnB,EAAOoB,oBAChC,OAAO/B,EAASW,QAAO,qBAAGxB,KACjB4C,oBAAoBC,SAASF,S,uBC4D/BG,EArEK,WAChB,MAAwBC,mBAAS,IAAjC,mBAAO/C,EAAP,KAAagD,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAO9C,EAAP,KAAegD,EAAf,KAEMpC,EAAWqC,YAAYC,EAAkBd,aACzCpB,EAAWmC,cAEXC,EAAe,SAACC,GAClB,MAAwBA,EAAIC,cAApBvD,EAAR,EAAQA,KAAMgB,EAAd,EAAcA,MAED,SAAThB,EACAgD,EAAQhC,GACQ,WAAThB,GACPiD,EAAUjC,IAeZwC,EAAQ,WACVR,EAAQ,IACRC,EAAU,KAGd,OACI,uBAAMQ,SAjBW,SAACH,GAClBA,EAAII,iBACe7C,EAAS8C,KAAI,qBAAG3D,KAAgB4C,uBACpCC,SAAS7C,EAAK4C,qBACzBgB,MAAM,GAAD,OAAI5D,EAAJ,6BAELiB,EAAS4C,EAAmB9C,WAAW,CAACf,OAAMC,YAC9CuD,MAU0BM,UAAWC,IAAEC,KAA3C,UACI,uBAAOF,UAAWC,IAAEE,MAApB,kBACA,uBACIH,UAAWC,IAAEG,MACblD,MAAOhB,EACPmE,KAAK,OACLnE,KAAK,OACLoE,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUlB,IAGd,uBAAOS,UAAWC,IAAEE,MAApB,oBACA,uBACIH,UAAWC,IAAEG,MACblD,MAAOf,EACPkE,KAAK,MACLnE,KAAK,SACLoE,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUlB,IAGd,wBACIS,UAAWC,IAAES,OACbL,KAAK,SAFT,6B,iBC9CGM,EAdA,WACX,IAAMjD,EAAS0B,YAAYC,EAAkBb,WACvCrB,EAAWmC,cAIjB,OACI,sBAAKU,UAAWC,IAAEC,KAAlB,UACI,uBAAOF,UAAWC,IAAEE,MAApB,oCACA,uBAAOH,UAAWC,IAAEG,MAAOC,KAAK,OAAOnD,MAAOQ,EAAQ+C,SAL7C,SAACG,GAAD,OAAOzD,EAAS4C,EAAmBtD,aAAamE,EAAEC,OAAO3D,e,kBCU/D4D,GAfS,SAAC,GAAD,IAAG5E,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQ4E,EAAjB,EAAiBA,SAAjB,OACpB,qBAAIf,UAAWC,KAAEe,KAAjB,UACI,iCAAO9E,EAAP,OACA,+BAAOC,IACP,wBAAQkE,KAAK,SAASY,QAASF,EAA/B,wBCyBOG,GA1BK,WAChB,IAAM/D,EAAWmC,cACX6B,EAAmB/B,YAAYC,EAAkBV,oBAEvDyC,qBAAU,WACNjE,EAAS4C,EAAmBrE,mBAC7B,CAACyB,IAMJ,OACIgE,GAAqB,oBAAInB,UAAWC,KAAEoB,KAAjB,SAChBF,EAAiBtB,KAAI,gBAAG7C,EAAH,EAAGA,GAAId,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAClB,cAAC,GAAD,CAEID,KAAMA,EACNC,OAAQA,EACR4E,SAAU,kBAXF,SAAC/D,GACrBG,EAAS4C,EAAmB3D,cAAcY,IAUdsE,CAAgBtE,KAH3BA,SCPTuE,GAVJ,kBACR,gCACE,oBAAIvB,UAAU,OAAd,uBACA,cAAC,EAAD,IACA,oBAAIA,UAAU,OAAd,sBACA,cAAC,EAAD,IACA,cAAC,GAAD,Q,YCFNwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1D,MAAOA,EAAjB,SACI,cAAC,GAAD,QAGN2D,SAASC,eAAe,U,kBCd1BpG,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,OAAS,+B","file":"static/js/main.509f48b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__2qyBI\",\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:3001';\n\nexport async function fetchContacts() {\n    const { data } = await axios.get('/contacts');\n    return data;\n}\n\nexport async function postContact(contact) {\n    return await axios.post('/contacts', {\n        name: contact.name,\n        number: contact.number\n    });\n}\n\nexport async function deleteContact(contactId) {\n    return await axios.delete(`/contacts/${contactId}`);\n}\n\nexport async function fetchContactById(contactId) {\n    const { data } = await axios.get(`/contacts/${contactId}`);\n    return data;\n}","import { createAction } from '@reduxjs/toolkit';\n\n////////////////////////     FETCH CONTACTS     //////////////////////////////////////\n\n// // pending\n// export const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\n// // fulfilled\n// export const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\n// // rejected\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\n\n////////////////////////     DELETE CONTACT    //////////////////////////////////////\n\n// // pending\n// export const deleteContactRequest = createAction('phoneBook/deleteContactRequest');\n// // fulfilled\n// export const deleteContactSuccess = createAction('phoneBook/deleteContactSuccess');\n// // rejected\n// export const deleteContactError = createAction('phoneBook/deleteContactError');\n\n////////////////////////     ADD CONTACT //////////////////////////////////////\n\n// // pending\n// export const addContactRequest = createAction('phoneBook/addContactRequest');\n// // fulfilled\n// export const addContactSuccess = createAction('phoneBook/addContactSuccess');\n// // rejected\n// export const addContactError = createAction('phoneBook/addContactError');\n\n////////////////////////     CHANGE FILTER    //////////////////////////////////////\n\nexport const changeFilter = createAction('phoneBook/changeFilter');","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport * as contactShelfAPI from '../services/contactshelf-api';\nimport * as contactsActions from './actions';\n\n// export const fetchContacts = () => async dispatch => {\n//     dispatch(contactsActions.fetchContactsRequest());\n//     try {\n//         const contacts = await contactShelfAPI.fetchContacts();\n//         dispatch(contactsActions.fetchContactsSuccess(contacts));\n//     } catch (error) {\n//         dispatch(contactsActions.fetchContactsError(error));\n//     }\n// };\n\nexport const fetchContacts = createAsyncThunk(\n    'contacts/fetchContacts',\n    async (_, { rejectWithValue }) => {\n        try {\n            const contacts = await contactShelfAPI.fetchContacts();\n            return contacts;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    }\n);\n\n// export const deleteContact = (id) => async dispatch => {\n//     dispatch(contactsActions.deleteContactRequest(id));\n//     try {\n//         await contactShelfAPI.deleteContact(id);\n//         dispatch(contactsActions.deleteContactSuccess(id));\n//     } catch (error) {\n//         dispatch(contactsActions.deleteContactError(error));\n//     }\n// }\n\nexport const deleteContact = createAsyncThunk(\n    'contacts/deleteContact',\n    async (id, { rejectWithValue }) => {\n        try {\n            await contactShelfAPI.deleteContact(id);\n            return id;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    }\n);\n\n// export const addContact = ({name, number}) => async dispatch => {\n//     dispatch(contactsActions.addContactRequest());\n//     try {\n//         const {data} = await contactShelfAPI.postContact({\n//             name,\n//             number,\n//         });\n//         dispatch(contactsActions.addContactSuccess(data));\n//     } catch (error) {\n//         dispatch(contactsActions.addContactError(error));\n//     }\n// }\n\nexport const addContact = createAsyncThunk(\n    'contacts/addContact',\n    async ({name, number}, { rejectWithValue }) => {    \n        try {\n            const { data } = await contactShelfAPI.postContact({\n                name,\n                number,\n            });\n            return data;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    }\n);\n\nexport const changeFilter = (value) => dispatch => {\n    dispatch(contactsActions.changeFilter(value));\n}","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { fetchContacts, deleteContact, addContact } from './operations';\nimport * as contactsActions from './actions';\n\nconst entities = createReducer([], {\n    // [contactsActions.fetchContactsSuccess]: (_, { payload }) => payload,\n    // [contactsActions.addContactSuccess]: (state, { payload }) => [payload, ...state],\n    // [contactsActions.deleteContactSuccess]: (state, { payload }) =>\n    //     state.filter(({ id }) => id !== payload),\n    \n    [fetchContacts.fulfilled]: (_, { payload }) => payload,\n    [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n    [deleteContact.fulfilled]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n    // [contactsActions.fetchContactsRequest]: () => true,\n    // [contactsActions.fetchContactsSuccess]: () => false,\n    // [contactsActions.fetchContactsError]: () => false,\n\n    [fetchContacts.pending]: () => true,\n    [fetchContacts.fulfilled]: () => false,\n    [fetchContacts.rejected]: () => false,\n\n    // [contactsActions.deleteContactRequest]: () => true,\n    // [contactsActions.deleteContactSuccess]: () => false,\n    // [contactsActions.deleteContactError]: () => false,\n\n    [deleteContact.pending]: () => true,\n    [deleteContact.fulfilled]: () => false,\n    [deleteContact.rejected]: () => false,\n\n    // [contactsActions.addContactRequest]: () => true,\n    // [contactsActions.addContactSuccess]: () => false,\n    // [contactsActions.addContactError]: () => false,\n\n    [addContact.pending]: () => true,\n    [addContact.fulfilled]: () => false,\n    [addContact.rejected]: () => false,\n})\n\nconst error = createReducer(null, {\n    // [contactsActions.fetchContactsError]: (_, { payload }) => payload,\n    // [contactsActions.fetchContactsRequest]: () => null,\n\n    [fetchContacts.rejected]: (_, { payload }) => payload,\n    [fetchContacts.pending]: () => null,\n\n    // [contactsActions.deleteContactError]: (_, { payload }) => payload,\n    // [contactsActions.deleteContactRequest]: () => null,\n\n    [deleteContact.rejected]: (_, { payload }) => payload,\n    [deleteContact.pending]: () => null,\n\n    // [contactsActions.addContactError]: (_, { payload }) => payload,\n    // [contactsActions.addContactRequest]: () => null,\n\n    [addContact.rejected]: (_, { payload }) => payload,\n    [addContact.pending]: () => null,\n})\n\nconst filter = createReducer('', {\n    [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n    entities,\n    filter,\n    isLoading,\n    error,\n});","import { configureStore } from \"@reduxjs/toolkit\";\nimport phoneBookReducer from './reducer';\n\nexport const store = configureStore({\n    reducer: {\n        phoneBook: phoneBookReducer,\n    },\n    devTools: process.env.NODE_ENV === 'development',\n});","import { createSelector } from \"reselect\";\n\nexport const getContacts = (state) => state.phoneBook.entities;\n\nexport const getFilter = (state) => state.phoneBook.filter;\n\nexport const getIsLoading = (state) => state.phoneBook.isLoading;\n\nexport const getError = (state) => state.phoneBook.error;\n\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter], (contacts, filter) => {\n        const normalizedFilter = filter.toLocaleLowerCase();\n        return contacts.filter(({ name }) =>\n            name.toLocaleLowerCase().includes(normalizedFilter));\n    },\n);\n\n// export const getVisibleContacts = state => {\n//     const filter = getFilter(state);\n//     const contacts = getContacts(state);\n    // const normalizedFilter = filter.toLocaleLowerCase();\n\n    // return contacts.filter(({ name }) =>\n    //     name.toLocaleLowerCase().includes(normalizedFilter));\n// };","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors} from '../../redux';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const dispatch = useDispatch();\n\n    const handleChange = (evt) => {\n        const { name, value } = evt.currentTarget;\n\n        if (name === 'name') {\n            setName(value);\n        } else if (name === 'number') {\n            setNumber(value);\n        };\n    }\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        const foundNames = contacts.map(({ name }) => name.toLocaleLowerCase());\n        if (foundNames.includes(name.toLocaleLowerCase())) {\n            alert(`${name} is already in contacts`);\n        } else {\n            dispatch(contactsOperations.addContact({name, number}));\n            reset();\n        }\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>Name</label>\n            <input\n                className={s.input}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                onChange={handleChange}\n            />\n\n            <label className={s.label}>Number</label>\n            <input\n                className={s.input}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                onChange={handleChange}\n            />\n                \n            <button\n                className={s.button}\n                type=\"submit\"\n            >\n                Add contact\n            </button>\n        </form>\n    );\n};\n\nexport default ContactForm;","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors} from '../../redux';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n    const filter = useSelector(contactsSelectors.getFilter);\n    const dispatch = useDispatch();\n\n    const onChange = (e) => dispatch(contactsOperations.changeFilter(e.target.value));\n\n    return (\n        <div className={s.form}>\n            <label className={s.label}> Find contacts by name</label>\n            <input className={s.input} type=\"text\" value={filter} onChange={onChange}/>\n        </div>\n    )\n}    \n\nexport default Filter;","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactListItem = ({ name, number, onDelete }) => (\n    <li className={s.item}>\n        <span>{name}:</span>\n        <span>{number}</span>\n        <button type=\"button\" onClick={onDelete}>Delete</button>\n    </li>\n\n);\n\nContactListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors} from '../../redux';\nimport ContactListItem from './ContactListItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const filteredContacts = useSelector(contactsSelectors.getVisibleContacts);\n    \n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n\n    const onDeleteContact = (id) => {\n        dispatch(contactsOperations.deleteContact(id));\n    };\n\n    return (\n        filteredContacts && (<ul className={s.list}>\n            {filteredContacts.map(({ id, name, number }) => (\n                <ContactListItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    onDelete={() => onDeleteContact(id)}\n                />\n            ))}\n        </ul>)\n    );\n}\n\nexport default ContactList;","import './App.css';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => (\n    <div>\n      <h1 className=\"text\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"text\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  )\n\nexport default (App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {store} from './redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};"],"sourceRoot":""}